package net.q1cc.cfs.tusync;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import net.q1cc.cfs.tusync.struct.Playlist;

/**
 *
 * @author claus
 */
public class SyncGUI extends javax.swing.JFrame {
    TunesManager tunesMan;

    /**
     * Creates new form SyncGUI
     */
    public SyncGUI() {
        initComponents();
        
        targetPathField.setText(Main.instance().props.get("lib.targetpath", null));
        libPathField.setText(Main.instance().props.get("lib.basepath",null));
        deleteOtherPlaylistsCheckbox.setSelected(Main.instance().props.getBoolean("sync.deleteotherplaylists", false));
        deleteOtherTitlesCheckbox.setSelected(Main.instance().props.getBoolean("sync.deleteothertitles", false));
        
        list.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                int index = list.locationToIndex(e.getPoint());
                if (index != -1) {
                    Playlist checkbox = (Playlist) list.getModel().getElementAt(
                            index);
                    tunesMan.toggleSelected(checkbox);
                    list.repaint();
                }
            }
        });
        list.setCellRenderer(new ListCellRenderer() {
            ListCellRenderer def = new DefaultListCellRenderer();
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                if(!(value instanceof Playlist)) {
                    return def.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                }
                Playlist p = (Playlist) value;
                p.setText(p.toString());
                if (!isSelected) {
                    p.setBackground(UIManager.getColor("List.background"));
                }
                return p;
            }
        });
        setLocationByPlatform(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        libPathField = new javax.swing.JTextField();
        libPathChooseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        targetPathField = new javax.swing.JTextField();
        targetPathChooseButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        loadDBButton = new javax.swing.JButton();
        syncButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        deleteOtherPlaylistsCheckbox = new javax.swing.JCheckBox();
        deleteOtherTitlesCheckbox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("tuSync");

        jLabel1.setText("iTunes Library XML");

        libPathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                libPathFieldActionPerformed(evt);
            }
        });

        libPathChooseButton.setText("Choose...");
        libPathChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                libPathChooseButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Target Directory");

        targetPathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetPathFieldActionPerformed(evt);
            }
        });

        targetPathChooseButton.setText("Choose...");
        targetPathChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                targetPathChooseButtonActionPerformed(evt);
            }
        });

        list.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Please choose the Path to your iTunes Library XML,", "your target directory and hit \"Load DB\"." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(list);

        loadDBButton.setText("Load DB");
        loadDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDBButtonActionPerformed(evt);
            }
        });

        syncButton.setText("Sync!");
        syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncButtonActionPerformed(evt);
            }
        });

        deleteOtherPlaylistsCheckbox.setText("Delete other playlists from destination");
        deleteOtherPlaylistsCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOtherPlaylistsCheckboxActionPerformed(evt);
            }
        });

        deleteOtherTitlesCheckbox.setText("Delete other files from destination");
        deleteOtherTitlesCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOtherTitlesCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(targetPathField)
                            .addComponent(libPathField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(libPathChooseButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(targetPathChooseButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loadDBButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(syncButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteOtherPlaylistsCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 6, Short.MAX_VALUE)
                        .addComponent(deleteOtherTitlesCheckbox)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(libPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(libPathChooseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(targetPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(targetPathChooseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteOtherPlaylistsCheckbox)
                    .addComponent(deleteOtherTitlesCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(loadDBButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(syncButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void libPathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_libPathFieldActionPerformed
        Main.instance().props.put("lib.xmlfile", libPathField.getText());
    }//GEN-LAST:event_libPathFieldActionPerformed
    
    private void libPathChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_libPathChooseButtonActionPerformed
        File home = new File(System.getProperty("user.home"));
        File tunes = new File(home.toString() + "/Music/iTunes/");
        if (tunes.exists()) {
            home = tunes;
        }
        JFileChooser jfc = new JFileChooser(home) {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().endsWith(".xml");
            }
        };
        jfc.showOpenDialog(this);
        File f = jfc.getSelectedFile();
        if (f != null) {
            libPathField.setText(f.getAbsolutePath());
            Main.instance().props.put("lib.xmlfile", f.getAbsolutePath());
            Main.instance().props.put("lib.basepath", f.getParent());
        } else {
            JOptionPane.showMessageDialog(this, "You did not select anything! Why would you do that to me?");
        }
    }//GEN-LAST:event_libPathChooseButtonActionPerformed

    private void loadDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDBButtonActionPerformed
        tunesMan.loadLibrary();
    }//GEN-LAST:event_loadDBButtonActionPerformed

    private void targetPathChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetPathChooseButtonActionPerformed
        File home = new File("/");
        JFileChooser jfc = new JFileChooser(home) {
            @Override
            public boolean accept(File f) {
                return f.isDirectory();
            }
        };
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jfc.setApproveButtonText("Select Folder");
        jfc.showOpenDialog(this);
        File f = jfc.getSelectedFile();
        if (f != null) {
            targetPathField.setText(f.getAbsolutePath());
            Main.instance().props.put("lib.targetpath", f.getAbsolutePath());
        } else {
            JOptionPane.showMessageDialog(this, "You did not select anything! Why would you do that to me?");
        }
    }//GEN-LAST:event_targetPathChooseButtonActionPerformed

    private void targetPathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_targetPathFieldActionPerformed
        Main.instance().props.put("lib.targetpath", targetPathField.getText());
    }//GEN-LAST:event_targetPathFieldActionPerformed

    private void syncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncButtonActionPerformed
        tunesMan.syncLibrary();
    }//GEN-LAST:event_syncButtonActionPerformed

    private void deleteOtherPlaylistsCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOtherPlaylistsCheckboxActionPerformed
        boolean sel = deleteOtherPlaylistsCheckbox.isSelected();
        if(sel) {
            int resp = JOptionPane.showConfirmDialog(this,
            "Warning: This deletes all m3u files in the destination folder. Do you really want that?",
            "Warning",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
            if(resp == JOptionPane.CLOSED_OPTION || resp == JOptionPane.CANCEL_OPTION) {
                sel = false;
            }
        }
        Main.instance().props.putBoolean("sync.deleteotherplaylists", sel);
    }//GEN-LAST:event_deleteOtherPlaylistsCheckboxActionPerformed

    private void deleteOtherTitlesCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOtherTitlesCheckboxActionPerformed
        boolean sel = deleteOtherTitlesCheckbox.isSelected();
        if(sel) {
            int resp = JOptionPane.showConfirmDialog(this,
            "Warning: This deletes every file in the destination folder but the ones being synced. Do you really want that?",
            "Warning",JOptionPane.OK_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);
            if(resp == JOptionPane.CLOSED_OPTION || resp == JOptionPane.CANCEL_OPTION) {
                sel = false;
            }
        }
        Main.instance().props.putBoolean("sync.deleteothertitles", sel);
    }//GEN-LAST:event_deleteOtherTitlesCheckboxActionPerformed
    
    public void setSyncButton(boolean checking, boolean syncing, boolean loading) {
        syncButton.setEnabled(!checking && !syncing && !loading);
    }
    
    public void setListEnabled(boolean enable) {
        list.setEnabled(enable);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox deleteOtherPlaylistsCheckbox;
    private javax.swing.JCheckBox deleteOtherTitlesCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton libPathChooseButton;
    private javax.swing.JTextField libPathField;
    javax.swing.JList list;
    private javax.swing.JButton loadDBButton;
    javax.swing.JProgressBar progressBar;
    javax.swing.JButton syncButton;
    private javax.swing.JButton targetPathChooseButton;
    private javax.swing.JTextField targetPathField;
    // End of variables declaration//GEN-END:variables
}
